/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/custom/login/login-general.js":
/*!*******************************************************************!*\
  !*** ./resources/metronic/js/pages/custom/login/login-general.js ***!
  \*******************************************************************/
/***/ (() => {

eval(" // Class Definition\n\nvar KTLogin = function () {\n  var _login;\n\n  var _showForm = function _showForm(form) {\n    var cls = \"login-\" + form + \"-on\";\n    var form = \"kt_login_\" + form + \"_form\";\n\n    _login.removeClass(\"login-forgot-on\");\n\n    _login.removeClass(\"login-signin-on\");\n\n    _login.removeClass(\"login-signup-on\");\n\n    _login.addClass(cls);\n\n    KTUtil.animateClass(KTUtil.getById(form), \"animate__animated animate__backInUp\");\n  };\n\n  var _handleSignInForm = function _handleSignInForm() {\n    var validation; // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validation = FormValidation.formValidation(KTUtil.getById(\"kt_login_signin_form\"), {\n      fields: {\n        email: {\n          validators: {\n            emailAddress: {\n              message: \"Email tidak benar.\"\n            },\n            notEmpty: {\n              message: \"Email tidak boleh kosong.\"\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: \"Kata sandi tidak boleh kosong\"\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        submitButton: new FormValidation.plugins.SubmitButton(),\n        //defaultSubmit: new FormValidation.plugins.DefaultSubmit(), // Uncomment this line to enable normal button submit after form validation\n        bootstrap: new FormValidation.plugins.Bootstrap()\n      }\n    });\n    $(\"#kt_login_signin_submit\").on(\"click\", function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status == \"Valid\") {\n          KTUtil.scrollTop();\n          $('#kt_login_signin_form').submit();\n        } else {\n          KTUtil.scrollTop();\n        }\n      });\n    }); // Handle forgot button\n\n    $(\"#kt_login_forgot\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"forgot\");\n    }); // Handle signup\n\n    $(\"#kt_login_signup\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"signup\");\n    });\n  };\n\n  var _handleSignUpForm = function _handleSignUpForm(e) {\n    var validation;\n    var form = KTUtil.getById(\"kt_login_signup_form\"); // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validation = FormValidation.formValidation(form, {\n      fields: {\n        fullname: {\n          validators: {\n            notEmpty: {\n              message: \"Username is required\"\n            }\n          }\n        },\n        email: {\n          validators: {\n            notEmpty: {\n              message: \"Email address is required\"\n            },\n            emailAddress: {\n              message: \"The value is not a valid email address\"\n            }\n          }\n        },\n        password: {\n          validators: {\n            notEmpty: {\n              message: \"The password is required\"\n            }\n          }\n        },\n        cpassword: {\n          validators: {\n            notEmpty: {\n              message: \"The password confirmation is required\"\n            },\n            identical: {\n              compare: function compare() {\n                return form.querySelector('[name=\"password\"]').value;\n              },\n              message: \"The password and its confirm are not the same\"\n            }\n          }\n        },\n        agree: {\n          validators: {\n            notEmpty: {\n              message: \"You must accept the terms and conditions\"\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap()\n      }\n    });\n    $(\"#kt_login_signup_submit\").on(\"click\", function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status == \"Valid\") {\n          swal.fire({\n            text: \"All is cool! Now you submit this form\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle cancel button\n\n    $(\"#kt_login_signup_cancel\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"signin\");\n    });\n  };\n\n  var _handleForgotForm = function _handleForgotForm(e) {\n    var validation; // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n\n    validation = FormValidation.formValidation(KTUtil.getById(\"kt_login_forgot_form\"), {\n      fields: {\n        email: {\n          validators: {\n            notEmpty: {\n              message: \"Email address is required\"\n            },\n            emailAddress: {\n              message: \"The value is not a valid email address\"\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap()\n      }\n    }); // Handle submit button\n\n    $(\"#kt_login_forgot_submit\").on(\"click\", function (e) {\n      e.preventDefault();\n      validation.validate().then(function (status) {\n        if (status == \"Valid\") {\n          // Submit form\n          KTUtil.scrollTop();\n        } else {\n          swal.fire({\n            text: \"Sorry, looks like there are some errors detected, please try again.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Ok, got it!\",\n            customClass: {\n              confirmButton: \"btn font-weight-bold btn-light-primary\"\n            }\n          }).then(function () {\n            KTUtil.scrollTop();\n          });\n        }\n      });\n    }); // Handle cancel button\n\n    $(\"#kt_login_forgot_cancel\").on(\"click\", function (e) {\n      e.preventDefault();\n\n      _showForm(\"signin\");\n    });\n  }; // Public Functions\n\n\n  return {\n    // public functions\n    init: function init() {\n      _login = $(\"#kt_login\");\n\n      _handleSignInForm();\n\n      _handleSignUpForm();\n\n      _handleForgotForm();\n    }\n  };\n}(); // Class Initialization\n\n\njQuery(document).ready(function () {\n  KTLogin.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/custom/login/login-general.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/custom/login/login-general.js"]();
/******/ 	
/******/ })()
;